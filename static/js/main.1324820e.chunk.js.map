{"version":3,"sources":["happy.png","joke/joke.jsx","jokeList/jokeList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","this","props","votes","className","onClick","upVote","style","borderColor","getColor","downVote","text","getEmoji","Component","API_URL","JokeList","loadJokes","a","jokes","length","numJokesToGet","axios","get","headers","Accept","resp","newJoke","data","joke","seenJokes","has","console","log","push","id","uuid","setState","oldState","loading","window","localStorage","setItem","JSON","stringify","state","alert","handleVote","delta","st","map","j","handleLoadJokes","savedData","parse","getItem","Set","sortedJokes","sort","b","src","happy","alt","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1324820e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/happy.9f6dc92a.png\";","import React, { Component } from 'react';\nimport './joke.css';\n\nclass Joke extends Component {\n  getColor() {\n    if (this.props.votes >= 15) {\n      return '#4CAF50';\n    } else if (this.props.votes >= 12) {\n      return '#8BC34A';\n    } else if (this.props.votes >= 9) {\n      return '#CDDC39';\n    } else if (this.props.votes >= 6) {\n      return '#FFEB3B';\n    } else if (this.props.votes >= 3) {\n      return '#FFC107';\n    } else if (this.props.votes >= 0) {\n      return '#FF9800';\n    } else {\n      return '#f44336';\n    }\n  }\n  getEmoji() {\n    if (this.props.votes >= 15) {\n      return 'em em-rolling_on_the_floor_laughing';\n    } else if (this.props.votes >= 12) {\n      return 'em em-laughing';\n    } else if (this.props.votes >= 9) {\n      return 'em em-smiley';\n    } else if (this.props.votes >= 6) {\n      return 'em em-slightly_smiling_face';\n    } else if (this.props.votes >= 3) {\n      return 'em em-neutral_face';\n    } else if (this.props.votes >= 0) {\n      return 'em em-confused';\n    } else {\n      return 'em em-angry';\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"joke\">\n        <div className=\"joke-buttons\">\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upVote} />\n          <span className=\"joke-votes\" style={{ borderColor: this.getColor() }}>\n            {this.props.votes}\n          </span>\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downVote} />\n        </div>\n        <div className=\"joke-text\">{this.props.text}</div>\n        <div className=\"joke-emoji\">\n          <i className={this.getEmoji()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","import React, { Component } from 'react';\nimport Joke from '../joke/joke';\nimport './jokeList.css';\nimport axios from 'axios';\nimport happy from '../happy.png';\nimport uuid from 'uuid/v4';\n\nconst API_URL = 'https://icanhazdadjoke.com/';\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n\n  constructor(props) {\n    super(props);\n    let savedData = JSON.parse(window.localStorage.getItem('jokes'));\n    if (savedData === null) {\n      savedData = [];\n    }\n    this.state = {\n      jokes: savedData,\n      loading: false\n    };\n    this.seenJokes = new Set(this.state.jokes.map(j => j.text));\n    console.log(this.seenJokes);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) {\n      this.loadJokes();\n    }\n  }\n\n  loadJokes = async () => {\n    try {\n      let jokes = [];\n      while (jokes.length < this.props.numJokesToGet) {\n        const resp = await axios.get(API_URL, {\n          headers: { Accept: 'application/json' }\n        });\n        const newJoke = resp.data.joke;\n        if (!this.seenJokes.has(newJoke)) {\n          jokes.push({ id: uuid(), text: newJoke, votes: 0 });\n        } else {\n          console.log('Found a duplicate :- ', newJoke);\n        }\n      }\n      this.setState(\n        oldState => ({\n          jokes: [...oldState.jokes, ...jokes],\n          loading: false\n        }),\n        () => {\n          window.localStorage.setItem(\n            'jokes',\n            JSON.stringify(this.state.jokes)\n          );\n        }\n      );\n    } catch (error) {\n      alert(error);\n      this.setState({ loading: false });\n    }\n  };\n\n  handleVote = (id, delta) => {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(j => {\n          return j.id === id ? { ...j, votes: j.votes + delta } : j;\n        })\n      }),\n      () => {\n        console.log(this.state.jokes);\n        window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes));\n      }\n    );\n  };\n\n  handleLoadJokes = () => {\n    this.setState({ loading: true }, this.loadJokes);\n  };\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"jokeList-spinner\">\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\n          <h1 className=\"jokeList-title\">Loading...</h1>\n        </div>\n      );\n    }\n\n    const sortedJokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n\n    return (\n      <div className=\"jokeList\">\n        <div className=\"jokeList-sidebar\">\n          <h1 className=\"jokeList-title\">\n            <span>Dad</span> Jokes!\n          </h1>\n          <img className=\"jokeList-img\" src={happy} alt=\"Smile Emoji\" />\n          <button className=\"jokeList-loadMore\" onClick={this.handleLoadJokes}>\n            Fetch Jokes\n          </button>\n        </div>\n        <div className=\"jokeList-jokes\">\n          {sortedJokes.map(j => (\n            <Joke\n              key={j.id}\n              id={j.id}\n              votes={j.votes}\n              text={j.text}\n              upVote={() => this.handleVote(j.id, 1)}\n              downVote={() => this.handleVote(j.id, -1)}\n            />\n          ))}\n          {console.log(typeof this.state.jokes)}\n          {console.log(this.state.jokes.length)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n","import React from 'react';\nimport JokeList from './jokeList/jokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}